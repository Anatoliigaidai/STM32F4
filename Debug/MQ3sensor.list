
MQ3sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003bf0  08003bf0  00013bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c48  08003c48  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c48  08003c48  00013c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c50  08003c50  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000008c  08003ce4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003ce4  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005afb  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010ea  00000000  00000000  00025bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004f8  00000000  00000000  00026ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000460  00000000  00000000  000271a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd3e  00000000  00000000  00027600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005267  00000000  00000000  0004733e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c34bb  00000000  00000000  0004c5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010fa60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d0  00000000  00000000  0010fadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bd4 	.word	0x08003bd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08003bd4 	.word	0x08003bd4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f000 fadb 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f87f 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f000 f939 	bl	80010c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e52:	f000 f8e5 	bl	8001020 <MX_ADC1_Init>
 
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_ADC_Start(&hadc1);
 8000e56:	483a      	ldr	r0, [pc, #232]	; (8000f40 <main+0x100>)
 8000e58:	f000 fbaa 	bl	80015b0 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100);
 8000e5c:	2164      	movs	r1, #100	; 0x64
 8000e5e:	4838      	ldr	r0, [pc, #224]	; (8000f40 <main+0x100>)
 8000e60:	f000 fc9f 	bl	80017a2 <HAL_ADC_PollForConversion>
      uint16_t ADC_DATA = HAL_ADC_GetValue(&hadc1);
 8000e64:	4836      	ldr	r0, [pc, #216]	; (8000f40 <main+0x100>)
 8000e66:	f000 fd20 	bl	80018aa <HAL_ADC_GetValue>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	807b      	strh	r3, [r7, #2]
      HAL_ADC_Stop(&hadc1);
 8000e6e:	4834      	ldr	r0, [pc, #208]	; (8000f40 <main+0x100>)
 8000e70:	f000 fc64 	bl	800173c <HAL_ADC_Stop>
      float PPM = Get_MQ3_Data(ADC_DATA)*10000000000;
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f976 	bl	8001168 <Get_MQ3_Data>
 8000e7c:	eeb0 7a40 	vmov.f32	s14, s0
 8000e80:	eddf 7a30 	vldr	s15, [pc, #192]	; 8000f44 <main+0x104>
 8000e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e88:	edc7 7a01 	vstr	s15, [r7, #4]
      HAL_Delay(1000);
 8000e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e90:	f000 fb28 	bl	80014e4 <HAL_Delay>
      if(PPM < 0){
 8000e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea0:	d502      	bpl.n	8000ea8 <main+0x68>
    	  PPM = 1.0;
 8000ea2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ea6:	607b      	str	r3, [r7, #4]
      }
      if(PPM >= -0.01 & PPM < 1.0){
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff faf1 	bl	8000490 <__aeabi_f2d>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	461c      	mov	r4, r3
 8000eb2:	a31f      	add	r3, pc, #124	; (adr r3, 8000f30 <main+0xf0>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fdc8 	bl	8000a4c <__aeabi_dcmpge>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <main+0x86>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	461c      	mov	r4, r3
 8000ec6:	b2e2      	uxtb	r2, r4
 8000ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	bf4c      	ite	mi
 8000eda:	2301      	movmi	r3, #1
 8000edc:	2300      	movpl	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <main+0xae>
          PPM = 2.0;
 8000ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eec:	607b      	str	r3, [r7, #4]
      }
      if(PPM > 1.9){
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff face 	bl	8000490 <__aeabi_f2d>
 8000ef4:	a310      	add	r3, pc, #64	; (adr r3, 8000f38 <main+0xf8>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff fdb1 	bl	8000a60 <__aeabi_dcmpgt>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <main+0xd8>
    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f08:	480f      	ldr	r0, [pc, #60]	; (8000f48 <main+0x108>)
 8000f0a:	f001 f992 	bl	8002232 <HAL_GPIO_TogglePin>
    	 HAL_Delay(1000);
 8000f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f12:	f000 fae7 	bl	80014e4 <HAL_Delay>
 8000f16:	e79e      	b.n	8000e56 <main+0x16>
      }else{
    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1c:	480a      	ldr	r0, [pc, #40]	; (8000f48 <main+0x108>)
 8000f1e:	f001 f988 	bl	8002232 <HAL_GPIO_TogglePin>
    	 HAL_Delay(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f000 fadd 	bl	80014e4 <HAL_Delay>
  {
 8000f2a:	e794      	b.n	8000e56 <main+0x16>
 8000f2c:	f3af 8000 	nop.w
 8000f30:	47ae147b 	.word	0x47ae147b
 8000f34:	bf847ae1 	.word	0xbf847ae1
 8000f38:	66666666 	.word	0x66666666
 8000f3c:	3ffe6666 	.word	0x3ffe6666
 8000f40:	200000a8 	.word	0x200000a8
 8000f44:	501502f9 	.word	0x501502f9
 8000f48:	40020c00 	.word	0x40020c00

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fddc 	bl	8002b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemClock_Config+0xd0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc0:	23a8      	movs	r3, #168	; 0xa8
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f949 	bl	8002268 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 f92e 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fba2 	bl	8002748 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100a:	f000 f917 	bl	800123c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <MX_ADC1_Init+0x9c>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_ADC1_Init+0x98>)
 800103a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_ADC1_Init+0xa0>)
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_ADC1_Init+0x98>)
 800106e:	2201      	movs	r2, #1
 8001070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_ADC1_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001082:	f000 fa51 	bl	8001528 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 f8d6 	bl	800123c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001090:	2300      	movs	r3, #0
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC1_Init+0x98>)
 80010a2:	f000 fc0f 	bl	80018c4 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ac:	f000 f8c6 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000a8 	.word	0x200000a8
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <MX_GPIO_Init+0x9c>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <MX_GPIO_Init+0xa0>)
 8001136:	f001 f863 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800113a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_GPIO_Init+0xa0>)
 8001154:	f000 feba 	bl	8001ecc <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020c00 	.word	0x40020c00

08001168 <Get_MQ3_Data>:

/* USER CODE BEGIN 4 */
float Get_MQ3_Data(uint16_t ADC_DATA){
 8001168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	80fb      	strh	r3, [r7, #6]
	float Sensor_volt = ADC_DATA / Koef_conv_to_3v;
 8001174:	88fa      	ldrh	r2, [r7, #6]
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <Get_MQ3_Data+0xbc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	fb92 f3f3 	sdiv	r3, r2, r3
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	edc7 7a05 	vstr	s15, [r7, #20]
	float Ratio = (((Input_v*RValue)/Sensor_volt)-RValue) / R0_MQ3;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <Get_MQ3_Data+0xc0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a27      	ldr	r2, [pc, #156]	; (800122c <Get_MQ3_Data+0xc4>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800119e:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <Get_MQ3_Data+0xc4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <Get_MQ3_Data+0xc8>)
 80011b8:	ed93 7a00 	vldr	s14, [r3]
 80011bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c0:	edc7 7a04 	vstr	s15, [r7, #16]
	float temp= PPM_hight*pow(Ratio, PPM_low);
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <Get_MQ3_Data+0xcc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f961 	bl	8000490 <__aeabi_f2d>
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	6938      	ldr	r0, [r7, #16]
 80011d4:	f7ff f95c 	bl	8000490 <__aeabi_f2d>
 80011d8:	4680      	mov	r8, r0
 80011da:	4689      	mov	r9, r1
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <Get_MQ3_Data+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f955 	bl	8000490 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	ec43 2b11 	vmov	d1, r2, r3
 80011ee:	ec49 8b10 	vmov	d0, r8, r9
 80011f2:	f001 fc99 	bl	8002b28 <pow>
 80011f6:	ec53 2b10 	vmov	r2, r3, d0
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff f99f 	bl	8000540 <__aeabi_dmul>
 8001202:	4603      	mov	r3, r0
 8001204:	460c      	mov	r4, r1
 8001206:	4618      	mov	r0, r3
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fc49 	bl	8000aa0 <__aeabi_d2f>
 800120e:	4603      	mov	r3, r0
 8001210:	60fb      	str	r3, [r7, #12]
	return temp;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	ee07 3a90 	vmov	s15, r3
}
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001224:	20000004 	.word	0x20000004
 8001228:	20000008 	.word	0x20000008
 800122c:	20000000 	.word	0x20000000
 8001230:	2000000c 	.word	0x2000000c
 8001234:	20000014 	.word	0x20000014
 8001238:	20000010 	.word	0x20000010

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_MspInit+0x4c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_ADC_MspInit+0x7c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d127      	bne.n	800130e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_ADC_MspInit+0x80>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <HAL_ADC_MspInit+0x80>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_ADC_MspInit+0x80>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_ADC_MspInit+0x80>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_ADC_MspInit+0x80>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_ADC_MspInit+0x80>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_ADC_MspInit+0x84>)
 800130a:	f000 fddf 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40012000 	.word	0x40012000
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 f894 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <SystemInit+0x28>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <SystemInit+0x28>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SystemInit+0x28>)
 8001396:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800139a:	609a      	str	r2, [r3, #8]
#endif
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013b2:	e003      	b.n	80013bc <LoopCopyDataInit>

080013b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013ba:	3104      	adds	r1, #4

080013bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013c4:	d3f6      	bcc.n	80013b4 <CopyDataInit>
  ldr  r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013c8:	e002      	b.n	80013d0 <LoopFillZerobss>

080013ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013cc:	f842 3b04 	str.w	r3, [r2], #4

080013d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013d4:	d3f9      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013d6:	f7ff ffd3 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f001 fb79 	bl	8002ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff fd2f 	bl	8000e40 <main>
  bx  lr    
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013e8:	08003c58 	.word	0x08003c58
  ldr  r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013f0:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80013f4:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80013f8:	200000f4 	.word	0x200000f4

080013fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_Init+0x40>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_Init+0x40>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x40>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 fd1b 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff ff0a 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fd25 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001480:	f000 fcfb 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000018 	.word	0x20000018
 800149c:	20000020 	.word	0x20000020
 80014a0:	2000001c 	.word	0x2000001c

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000020 	.word	0x20000020
 80014c8:	200000f0 	.word	0x200000f0

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200000f0 	.word	0x200000f0

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_Delay+0x40>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000020 	.word	0x20000020

08001528 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e033      	b.n	80015a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fea8 	bl	800129c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800156e:	f023 0302 	bic.w	r3, r3, #2
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fac4 	bl	8001b08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
 8001596:	e001      	b.n	800159c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Start+0x1a>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e0a5      	b.n	8001716 <HAL_ADC_Start+0x166>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d018      	beq.n	8001612 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015f0:	4b4c      	ldr	r3, [pc, #304]	; (8001724 <HAL_ADC_Start+0x174>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <HAL_ADC_Start+0x178>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9a      	lsrs	r2, r3, #18
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001604:	e002      	b.n	800160c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d179      	bne.n	8001714 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800164a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165e:	d106      	bne.n	800166e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f023 0206 	bic.w	r2, r3, #6
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
 800166c:	e002      	b.n	8001674 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_ADC_Start+0x17c>)
 800167e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001688:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	2b00      	cmp	r3, #0
 8001694:	d12a      	bne.n	80016ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_ADC_Start+0x180>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d015      	beq.n	80016cc <HAL_ADC_Start+0x11c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a23      	ldr	r2, [pc, #140]	; (8001734 <HAL_ADC_Start+0x184>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d105      	bne.n	80016b6 <HAL_ADC_Start+0x106>
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_ADC_Start+0x17c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00a      	beq.n	80016cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_ADC_Start+0x188>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d129      	bne.n	8001714 <HAL_ADC_Start+0x164>
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_ADC_Start+0x17c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d823      	bhi.n	8001714 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11c      	bne.n	8001714 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	e013      	b.n	8001714 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_ADC_Start+0x180>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10e      	bne.n	8001714 <HAL_ADC_Start+0x164>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001712:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000018 	.word	0x20000018
 8001728:	431bde83 	.word	0x431bde83
 800172c:	40012300 	.word	0x40012300
 8001730:	40012000 	.word	0x40012000
 8001734:	40012100 	.word	0x40012100
 8001738:	40012200 	.word	0x40012200

0800173c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Stop+0x16>
 800174e:	2302      	movs	r3, #2
 8001750:	e021      	b.n	8001796 <HAL_ADC_Stop+0x5a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d109      	bne.n	800178c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017be:	d113      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ce:	d10b      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f043 0220 	orr.w	r2, r3, #32
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e05c      	b.n	80018a2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80017e8:	f7ff fe70 	bl	80014cc <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017ee:	e01a      	b.n	8001826 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f6:	d016      	beq.n	8001826 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <HAL_ADC_PollForConversion+0x6c>
 80017fe:	f7ff fe65 	bl	80014cc <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20b      	bcs.n	8001826 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f043 0204 	orr.w	r2, r3, #4
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e03d      	b.n	80018a2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b02      	cmp	r3, #2
 8001832:	d1dd      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0212 	mvn.w	r2, #18
 800183c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d123      	bne.n	80018a0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800185c:	2b00      	cmp	r3, #0
 800185e:	d11f      	bne.n	80018a0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1c>
 80018dc:	2302      	movs	r3, #2
 80018de:	e105      	b.n	8001aec <HAL_ADC_ConfigChannel+0x228>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d925      	bls.n	800193c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68d9      	ldr	r1, [r3, #12]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	3b1e      	subs	r3, #30
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43da      	mvns	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	400a      	ands	r2, r1
 8001914:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68d9      	ldr	r1, [r3, #12]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	4603      	mov	r3, r0
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4403      	add	r3, r0
 800192e:	3b1e      	subs	r3, #30
 8001930:	409a      	lsls	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	e022      	b.n	8001982 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6919      	ldr	r1, [r3, #16]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	2207      	movs	r2, #7
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6919      	ldr	r1, [r3, #16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	4603      	mov	r3, r0
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4403      	add	r3, r0
 8001978:	409a      	lsls	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b06      	cmp	r3, #6
 8001988:	d824      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b05      	subs	r3, #5
 800199c:	221f      	movs	r2, #31
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	400a      	ands	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b05      	subs	r3, #5
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
 80019d2:	e04c      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d824      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b23      	subs	r3, #35	; 0x23
 80019ee:	221f      	movs	r2, #31
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43da      	mvns	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	400a      	ands	r2, r1
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b23      	subs	r3, #35	; 0x23
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
 8001a24:	e023      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b41      	subs	r3, #65	; 0x41
 8001a38:	221f      	movs	r2, #31
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	400a      	ands	r2, r1
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b41      	subs	r3, #65	; 0x41
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_ADC_ConfigChannel+0x234>)
 8001a70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_ADC_ConfigChannel+0x238>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d109      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x1cc>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b12      	cmp	r3, #18
 8001a82:	d105      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_ADC_ConfigChannel+0x238>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d123      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x21e>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d003      	beq.n	8001aaa <HAL_ADC_ConfigChannel+0x1e6>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b11      	cmp	r3, #17
 8001aa8:	d11b      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d111      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_ADC_ConfigChannel+0x23c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_ADC_ConfigChannel+0x240>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	0c9a      	lsrs	r2, r3, #18
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f9      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40012300 	.word	0x40012300
 8001afc:	40012000 	.word	0x40012000
 8001b00:	20000018 	.word	0x20000018
 8001b04:	431bde83 	.word	0x431bde83

08001b08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b10:	4b79      	ldr	r3, [pc, #484]	; (8001cf8 <ADC_Init+0x1f0>)
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	021a      	lsls	r2, r3, #8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6899      	ldr	r1, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <ADC_Init+0x1f4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d022      	beq.n	8001be6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e00f      	b.n	8001c06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0202 	bic.w	r2, r2, #2
 8001c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6899      	ldr	r1, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7e1b      	ldrb	r3, [r3, #24]
 8001c20:	005a      	lsls	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01b      	beq.n	8001c6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	035a      	lsls	r2, r3, #13
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	e007      	b.n	8001c7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	051a      	lsls	r2, r3, #20
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6899      	ldr	r1, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cbe:	025a      	lsls	r2, r3, #9
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6899      	ldr	r1, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	029a      	lsls	r2, r3, #10
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40012300 	.word	0x40012300
 8001cfc:	0f000001 	.word	0x0f000001

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e44:	f7ff ff8e 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff47 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff5c 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff8e 	bl	8001db8 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5d 	bl	8001d64 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffb0 	bl	8001e20 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e16b      	b.n	80021c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 815a 	bne.w	80021ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00b      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1a:	2b11      	cmp	r3, #17
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0xfc>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b12      	cmp	r3, #18
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b4 	beq.w	80021ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_GPIO_Init+0x308>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <HAL_GPIO_Init+0x308>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_GPIO_Init+0x308>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_GPIO_Init+0x310>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_GPIO_Init+0x314>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4f      	ldr	r2, [pc, #316]	; (80021e4 <HAL_GPIO_Init+0x318>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4e      	ldr	r2, [pc, #312]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <HAL_GPIO_Init+0x320>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4c      	ldr	r2, [pc, #304]	; (80021f0 <HAL_GPIO_Init+0x324>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_GPIO_Init+0x328>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4a      	ldr	r2, [pc, #296]	; (80021f8 <HAL_GPIO_Init+0x32c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020d6:	2308      	movs	r3, #8
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002136:	4a31      	ldr	r2, [pc, #196]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x330>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_GPIO_Init+0x330>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_GPIO_Init+0x330>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae90 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	401a      	ands	r2, r3
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	429a      	cmp	r2, r3
 800224a:	d104      	bne.n	8002256 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	041a      	lsls	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002254:	e002      	b.n	800225c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e25b      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d075      	beq.n	8002372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	4ba3      	ldr	r3, [pc, #652]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d00c      	beq.n	80022ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4ba0      	ldr	r3, [pc, #640]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229a:	2b08      	cmp	r3, #8
 800229c:	d112      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b9d      	ldr	r3, [pc, #628]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b99      	ldr	r3, [pc, #612]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05b      	beq.n	8002370 <HAL_RCC_OscConfig+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d157      	bne.n	8002370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e236      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x74>
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a90      	ldr	r2, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x98>
 80022e6:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a8a      	ldr	r2, [pc, #552]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a87      	ldr	r2, [pc, #540]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a83      	ldr	r2, [pc, #524]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b81      	ldr	r3, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a80      	ldr	r2, [pc, #512]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff f8d4 	bl	80014cc <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff f8d0 	bl	80014cc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1fb      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xc0>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff f8c0 	bl	80014cc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff f8bc 	bl	80014cc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1e7      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0xe8>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1bb      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4952      	ldr	r1, [pc, #328]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_OscConfig+0x2b0>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff f875 	bl	80014cc <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff f871 	bl	80014cc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e19c      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4940      	ldr	r1, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x2b0>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f854 	bl	80014cc <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff f850 	bl	80014cc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e17b      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d030      	beq.n	80024b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x2b4>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff f834 	bl	80014cc <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff f830 	bl	80014cc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e15b      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x200>
 8002486:	e015      	b.n	80024b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x2b4>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff f81d 	bl	80014cc <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002496:	f7ff f819 	bl	80014cc <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e144      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a0 	beq.w	8002602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d121      	bne.n	8002542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe ffdf 	bl	80014cc <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e011      	b.n	8002536 <HAL_RCC_OscConfig+0x2ce>
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
 8002520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe ffd2 	bl	80014cc <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0fd      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4d4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x2f0>
 800254a:	4b7d      	ldr	r3, [pc, #500]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a7c      	ldr	r2, [pc, #496]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	e01c      	b.n	8002592 <HAL_RCC_OscConfig+0x32a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x312>
 8002560:	4b77      	ldr	r3, [pc, #476]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a76      	ldr	r2, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b74      	ldr	r3, [pc, #464]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a73      	ldr	r2, [pc, #460]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x32a>
 800257a:	4b71      	ldr	r3, [pc, #452]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a70      	ldr	r2, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a6d      	ldr	r2, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fe ff97 	bl	80014cc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe ff93 	bl	80014cc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0bc      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCC_OscConfig+0x33a>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe ff81 	bl	80014cc <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe ff7d 	bl	80014cc <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0a6      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8092 	beq.w	8002730 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d05c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d141      	bne.n	80026a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b48      	ldr	r3, [pc, #288]	; (8002744 <HAL_RCC_OscConfig+0x4dc>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe ff51 	bl	80014cc <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe ff4d 	bl	80014cc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e078      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	019b      	lsls	r3, r3, #6
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	4933      	ldr	r1, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x4dc>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe ff26 	bl	80014cc <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe ff22 	bl	80014cc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e04d      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x41c>
 80026a2:	e045      	b.n	8002730 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe ff0f 	bl	80014cc <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fe ff0b 	bl	80014cc <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e036      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x44a>
 80026d0:	e02e      	b.n	8002730 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e029      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d115      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002706:	4013      	ands	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800270c:	4293      	cmp	r3, r2
 800270e:	d10d      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40007000 	.word	0x40007000
 8002740:	40023800 	.word	0x40023800
 8002744:	42470060 	.word	0x42470060

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0cc      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b68      	ldr	r3, [pc, #416]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d90c      	bls.n	8002784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a58      	ldr	r2, [pc, #352]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d044      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e067      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4934      	ldr	r1, [pc, #208]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7fe fe48 	bl	80014cc <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe fe44 	bl	80014cc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e04f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4601      	mov	r1, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	fa21 f303 	lsr.w	r3, r1, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fda8 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00
 8002904:	40023800 	.word	0x40023800
 8002908:	08003bf0 	.word	0x08003bf0
 800290c:	20000018 	.word	0x20000018
 8002910:	2000001c 	.word	0x2000001c

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d007      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x32>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d008      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x38>
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 80b4 	bne.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002942:	60bb      	str	r3, [r7, #8]
       break;
 8002944:	e0b3      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002946:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002948:	60bb      	str	r3, [r7, #8]
      break;
 800294a:	e0b0      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294c:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002954:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04a      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	ea03 0501 	and.w	r5, r3, r1
 8002978:	ea04 0602 	and.w	r6, r4, r2
 800297c:	4629      	mov	r1, r5
 800297e:	4632      	mov	r2, r6
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	0154      	lsls	r4, r2, #5
 800298a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800298e:	014b      	lsls	r3, r1, #5
 8002990:	4619      	mov	r1, r3
 8002992:	4622      	mov	r2, r4
 8002994:	1b49      	subs	r1, r1, r5
 8002996:	eb62 0206 	sbc.w	r2, r2, r6
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	f04f 0400 	mov.w	r4, #0
 80029a2:	0194      	lsls	r4, r2, #6
 80029a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a8:	018b      	lsls	r3, r1, #6
 80029aa:	1a5b      	subs	r3, r3, r1
 80029ac:	eb64 0402 	sbc.w	r4, r4, r2
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	00e2      	lsls	r2, r4, #3
 80029ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029be:	00d9      	lsls	r1, r3, #3
 80029c0:	460b      	mov	r3, r1
 80029c2:	4614      	mov	r4, r2
 80029c4:	195b      	adds	r3, r3, r5
 80029c6:	eb44 0406 	adc.w	r4, r4, r6
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	0262      	lsls	r2, r4, #9
 80029d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029d8:	0259      	lsls	r1, r3, #9
 80029da:	460b      	mov	r3, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	4621      	mov	r1, r4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f04f 0400 	mov.w	r4, #0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	f7fe f8a8 	bl	8000b40 <__aeabi_uldivmod>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e049      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f8:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	f04f 0400 	mov.w	r4, #0
 8002a02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	ea03 0501 	and.w	r5, r3, r1
 8002a0e:	ea04 0602 	and.w	r6, r4, r2
 8002a12:	4629      	mov	r1, r5
 8002a14:	4632      	mov	r2, r6
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f04f 0400 	mov.w	r4, #0
 8002a1e:	0154      	lsls	r4, r2, #5
 8002a20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a24:	014b      	lsls	r3, r1, #5
 8002a26:	4619      	mov	r1, r3
 8002a28:	4622      	mov	r2, r4
 8002a2a:	1b49      	subs	r1, r1, r5
 8002a2c:	eb62 0206 	sbc.w	r2, r2, r6
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	f04f 0400 	mov.w	r4, #0
 8002a38:	0194      	lsls	r4, r2, #6
 8002a3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a3e:	018b      	lsls	r3, r1, #6
 8002a40:	1a5b      	subs	r3, r3, r1
 8002a42:	eb64 0402 	sbc.w	r4, r4, r2
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	00e2      	lsls	r2, r4, #3
 8002a50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a54:	00d9      	lsls	r1, r3, #3
 8002a56:	460b      	mov	r3, r1
 8002a58:	4614      	mov	r4, r2
 8002a5a:	195b      	adds	r3, r3, r5
 8002a5c:	eb44 0406 	adc.w	r4, r4, r6
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	02a2      	lsls	r2, r4, #10
 8002a6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a6e:	0299      	lsls	r1, r3, #10
 8002a70:	460b      	mov	r3, r1
 8002a72:	4614      	mov	r4, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	4621      	mov	r1, r4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f04f 0400 	mov.w	r4, #0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4623      	mov	r3, r4
 8002a82:	f7fe f85d 	bl	8000b40 <__aeabi_uldivmod>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	60bb      	str	r3, [r7, #8]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aaa:	60bb      	str	r3, [r7, #8]
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	68bb      	ldr	r3, [r7, #8]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <__errno>:
 8002ac4:	4b01      	ldr	r3, [pc, #4]	; (8002acc <__errno+0x8>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000024 	.word	0x20000024

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	4e0d      	ldr	r6, [pc, #52]	; (8002b08 <__libc_init_array+0x38>)
 8002ad4:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <__libc_init_array+0x3c>)
 8002ad6:	1ba4      	subs	r4, r4, r6
 8002ad8:	10a4      	asrs	r4, r4, #2
 8002ada:	2500      	movs	r5, #0
 8002adc:	42a5      	cmp	r5, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	4e0b      	ldr	r6, [pc, #44]	; (8002b10 <__libc_init_array+0x40>)
 8002ae2:	4c0c      	ldr	r4, [pc, #48]	; (8002b14 <__libc_init_array+0x44>)
 8002ae4:	f001 f876 	bl	8003bd4 <_init>
 8002ae8:	1ba4      	subs	r4, r4, r6
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	2500      	movs	r5, #0
 8002aee:	42a5      	cmp	r5, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af8:	4798      	blx	r3
 8002afa:	3501      	adds	r5, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b02:	4798      	blx	r3
 8002b04:	3501      	adds	r5, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08003c50 	.word	0x08003c50
 8002b0c:	08003c50 	.word	0x08003c50
 8002b10:	08003c50 	.word	0x08003c50
 8002b14:	08003c54 	.word	0x08003c54

08002b18 <memset>:
 8002b18:	4402      	add	r2, r0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <memset+0xa>
 8002b20:	4770      	bx	lr
 8002b22:	f803 1b01 	strb.w	r1, [r3], #1
 8002b26:	e7f9      	b.n	8002b1c <memset+0x4>

08002b28 <pow>:
 8002b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2c:	ed2d 8b04 	vpush	{d8-d9}
 8002b30:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8002e04 <pow+0x2dc>
 8002b34:	b08d      	sub	sp, #52	; 0x34
 8002b36:	ec57 6b10 	vmov	r6, r7, d0
 8002b3a:	ec55 4b11 	vmov	r4, r5, d1
 8002b3e:	f000 f963 	bl	8002e08 <__ieee754_pow>
 8002b42:	f999 3000 	ldrsb.w	r3, [r9]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	eeb0 8a40 	vmov.f32	s16, s0
 8002b4e:	eef0 8a60 	vmov.f32	s17, s1
 8002b52:	46c8      	mov	r8, r9
 8002b54:	d05f      	beq.n	8002c16 <pow+0xee>
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd ff89 	bl	8000a74 <__aeabi_dcmpun>
 8002b62:	4683      	mov	fp, r0
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d156      	bne.n	8002c16 <pow+0xee>
 8002b68:	4632      	mov	r2, r6
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	4639      	mov	r1, r7
 8002b70:	f7fd ff80 	bl	8000a74 <__aeabi_dcmpun>
 8002b74:	9001      	str	r0, [sp, #4]
 8002b76:	b1e8      	cbz	r0, 8002bb4 <pow+0x8c>
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	4629      	mov	r1, r5
 8002b80:	f7fd ff46 	bl	8000a10 <__aeabi_dcmpeq>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d046      	beq.n	8002c16 <pow+0xee>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	4b96      	ldr	r3, [pc, #600]	; (8002de8 <pow+0x2c0>)
 8002b8e:	9303      	str	r3, [sp, #12]
 8002b90:	4b96      	ldr	r3, [pc, #600]	; (8002dec <pow+0x2c4>)
 8002b92:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8002b96:	2200      	movs	r2, #0
 8002b98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002b9c:	9b00      	ldr	r3, [sp, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002ba4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002ba8:	d033      	beq.n	8002c12 <pow+0xea>
 8002baa:	a802      	add	r0, sp, #8
 8002bac:	f000 fefb 	bl	80039a6 <matherr>
 8002bb0:	bb48      	cbnz	r0, 8002c06 <pow+0xde>
 8002bb2:	e05d      	b.n	8002c70 <pow+0x148>
 8002bb4:	f04f 0a00 	mov.w	sl, #0
 8002bb8:	f04f 0b00 	mov.w	fp, #0
 8002bbc:	4652      	mov	r2, sl
 8002bbe:	465b      	mov	r3, fp
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4639      	mov	r1, r7
 8002bc4:	f7fd ff24 	bl	8000a10 <__aeabi_dcmpeq>
 8002bc8:	ec4b ab19 	vmov	d9, sl, fp
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d054      	beq.n	8002c7a <pow+0x152>
 8002bd0:	4652      	mov	r2, sl
 8002bd2:	465b      	mov	r3, fp
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	f7fd ff1a 	bl	8000a10 <__aeabi_dcmpeq>
 8002bdc:	4680      	mov	r8, r0
 8002bde:	b318      	cbz	r0, 8002c28 <pow+0x100>
 8002be0:	2301      	movs	r3, #1
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	4b80      	ldr	r3, [pc, #512]	; (8002de8 <pow+0x2c0>)
 8002be6:	9303      	str	r3, [sp, #12]
 8002be8:	9b01      	ldr	r3, [sp, #4]
 8002bea:	930a      	str	r3, [sp, #40]	; 0x28
 8002bec:	9b00      	ldr	r3, [sp, #0]
 8002bee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002bf2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002bf6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0d5      	beq.n	8002baa <pow+0x82>
 8002bfe:	4b7b      	ldr	r3, [pc, #492]	; (8002dec <pow+0x2c4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c08:	b11b      	cbz	r3, 8002c12 <pow+0xea>
 8002c0a:	f7ff ff5b 	bl	8002ac4 <__errno>
 8002c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c10:	6003      	str	r3, [r0, #0]
 8002c12:	ed9d 8b08 	vldr	d8, [sp, #32]
 8002c16:	eeb0 0a48 	vmov.f32	s0, s16
 8002c1a:	eef0 0a68 	vmov.f32	s1, s17
 8002c1e:	b00d      	add	sp, #52	; 0x34
 8002c20:	ecbd 8b04 	vpop	{d8-d9}
 8002c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c28:	ec45 4b10 	vmov	d0, r4, r5
 8002c2c:	f000 feb3 	bl	8003996 <finite>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d0f0      	beq.n	8002c16 <pow+0xee>
 8002c34:	4652      	mov	r2, sl
 8002c36:	465b      	mov	r3, fp
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	f7fd fef2 	bl	8000a24 <__aeabi_dcmplt>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d0e8      	beq.n	8002c16 <pow+0xee>
 8002c44:	2301      	movs	r3, #1
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	4b67      	ldr	r3, [pc, #412]	; (8002de8 <pow+0x2c0>)
 8002c4a:	9303      	str	r3, [sp, #12]
 8002c4c:	f999 3000 	ldrsb.w	r3, [r9]
 8002c50:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8002c54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002c58:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002c5c:	b913      	cbnz	r3, 8002c64 <pow+0x13c>
 8002c5e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002c62:	e7a2      	b.n	8002baa <pow+0x82>
 8002c64:	4962      	ldr	r1, [pc, #392]	; (8002df0 <pow+0x2c8>)
 8002c66:	2000      	movs	r0, #0
 8002c68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d19c      	bne.n	8002baa <pow+0x82>
 8002c70:	f7ff ff28 	bl	8002ac4 <__errno>
 8002c74:	2321      	movs	r3, #33	; 0x21
 8002c76:	6003      	str	r3, [r0, #0]
 8002c78:	e7c5      	b.n	8002c06 <pow+0xde>
 8002c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8002c7e:	eef0 0a68 	vmov.f32	s1, s17
 8002c82:	f000 fe88 	bl	8003996 <finite>
 8002c86:	9000      	str	r0, [sp, #0]
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	f040 8081 	bne.w	8002d90 <pow+0x268>
 8002c8e:	ec47 6b10 	vmov	d0, r6, r7
 8002c92:	f000 fe80 	bl	8003996 <finite>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d07a      	beq.n	8002d90 <pow+0x268>
 8002c9a:	ec45 4b10 	vmov	d0, r4, r5
 8002c9e:	f000 fe7a 	bl	8003996 <finite>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d074      	beq.n	8002d90 <pow+0x268>
 8002ca6:	ec53 2b18 	vmov	r2, r3, d8
 8002caa:	ee18 0a10 	vmov	r0, s16
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fd fee0 	bl	8000a74 <__aeabi_dcmpun>
 8002cb4:	f999 9000 	ldrsb.w	r9, [r9]
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <pow+0x2c0>)
 8002cba:	b1b0      	cbz	r0, 8002cea <pow+0x1c2>
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cc2:	9b00      	ldr	r3, [sp, #0]
 8002cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8002cc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002cca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002cce:	f1b9 0f00 	cmp.w	r9, #0
 8002cd2:	d0c4      	beq.n	8002c5e <pow+0x136>
 8002cd4:	4652      	mov	r2, sl
 8002cd6:	465b      	mov	r3, fp
 8002cd8:	4650      	mov	r0, sl
 8002cda:	4659      	mov	r1, fp
 8002cdc:	f7fd fd5a 	bl	8000794 <__aeabi_ddiv>
 8002ce0:	f1b9 0f02 	cmp.w	r9, #2
 8002ce4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002ce8:	e7c1      	b.n	8002c6e <pow+0x146>
 8002cea:	2203      	movs	r2, #3
 8002cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cf0:	900a      	str	r0, [sp, #40]	; 0x28
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <pow+0x2cc>)
 8002cfa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002d02:	f7fd fc1d 	bl	8000540 <__aeabi_dmul>
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
 8002d0a:	f1b9 0f00 	cmp.w	r9, #0
 8002d0e:	d124      	bne.n	8002d5a <pow+0x232>
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <pow+0x2d0>)
 8002d12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002d16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	4652      	mov	r2, sl
 8002d1e:	465b      	mov	r3, fp
 8002d20:	4639      	mov	r1, r7
 8002d22:	f7fd fe7f 	bl	8000a24 <__aeabi_dcmplt>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d056      	beq.n	8002dd8 <pow+0x2b0>
 8002d2a:	ec45 4b10 	vmov	d0, r4, r5
 8002d2e:	f000 fe47 	bl	80039c0 <rint>
 8002d32:	4622      	mov	r2, r4
 8002d34:	462b      	mov	r3, r5
 8002d36:	ec51 0b10 	vmov	r0, r1, d0
 8002d3a:	f7fd fe69 	bl	8000a10 <__aeabi_dcmpeq>
 8002d3e:	b920      	cbnz	r0, 8002d4a <pow+0x222>
 8002d40:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <pow+0x2d4>)
 8002d42:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002d46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002d4a:	f998 3000 	ldrsb.w	r3, [r8]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d142      	bne.n	8002dd8 <pow+0x2b0>
 8002d52:	f7ff feb7 	bl	8002ac4 <__errno>
 8002d56:	2322      	movs	r3, #34	; 0x22
 8002d58:	e78d      	b.n	8002c76 <pow+0x14e>
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <pow+0x2d8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002d62:	4630      	mov	r0, r6
 8002d64:	4652      	mov	r2, sl
 8002d66:	465b      	mov	r3, fp
 8002d68:	4639      	mov	r1, r7
 8002d6a:	f7fd fe5b 	bl	8000a24 <__aeabi_dcmplt>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d0eb      	beq.n	8002d4a <pow+0x222>
 8002d72:	ec45 4b10 	vmov	d0, r4, r5
 8002d76:	f000 fe23 	bl	80039c0 <rint>
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	ec51 0b10 	vmov	r0, r1, d0
 8002d82:	f7fd fe45 	bl	8000a10 <__aeabi_dcmpeq>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d1df      	bne.n	8002d4a <pow+0x222>
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <pow+0x2c8>)
 8002d8e:	e7da      	b.n	8002d46 <pow+0x21e>
 8002d90:	2200      	movs	r2, #0
 8002d92:	2300      	movs	r3, #0
 8002d94:	ec51 0b18 	vmov	r0, r1, d8
 8002d98:	f7fd fe3a 	bl	8000a10 <__aeabi_dcmpeq>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	f43f af3a 	beq.w	8002c16 <pow+0xee>
 8002da2:	ec47 6b10 	vmov	d0, r6, r7
 8002da6:	f000 fdf6 	bl	8003996 <finite>
 8002daa:	2800      	cmp	r0, #0
 8002dac:	f43f af33 	beq.w	8002c16 <pow+0xee>
 8002db0:	ec45 4b10 	vmov	d0, r4, r5
 8002db4:	f000 fdef 	bl	8003996 <finite>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	f43f af2c 	beq.w	8002c16 <pow+0xee>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <pow+0x2c0>)
 8002dc4:	9303      	str	r3, [sp, #12]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	930a      	str	r3, [sp, #40]	; 0x28
 8002dca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002dce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002dd2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8002dd6:	e7b8      	b.n	8002d4a <pow+0x222>
 8002dd8:	a802      	add	r0, sp, #8
 8002dda:	f000 fde4 	bl	80039a6 <matherr>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	f47f af11 	bne.w	8002c06 <pow+0xde>
 8002de4:	e7b5      	b.n	8002d52 <pow+0x22a>
 8002de6:	bf00      	nop
 8002de8:	08003c00 	.word	0x08003c00
 8002dec:	3ff00000 	.word	0x3ff00000
 8002df0:	fff00000 	.word	0xfff00000
 8002df4:	3fe00000 	.word	0x3fe00000
 8002df8:	47efffff 	.word	0x47efffff
 8002dfc:	c7efffff 	.word	0xc7efffff
 8002e00:	7ff00000 	.word	0x7ff00000
 8002e04:	20000088 	.word	0x20000088

08002e08 <__ieee754_pow>:
 8002e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0c:	b091      	sub	sp, #68	; 0x44
 8002e0e:	ed8d 1b00 	vstr	d1, [sp]
 8002e12:	e9dd 2900 	ldrd	r2, r9, [sp]
 8002e16:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002e1a:	ea58 0302 	orrs.w	r3, r8, r2
 8002e1e:	ec57 6b10 	vmov	r6, r7, d0
 8002e22:	f000 84be 	beq.w	80037a2 <__ieee754_pow+0x99a>
 8002e26:	4b7a      	ldr	r3, [pc, #488]	; (8003010 <__ieee754_pow+0x208>)
 8002e28:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002e2c:	429c      	cmp	r4, r3
 8002e2e:	463d      	mov	r5, r7
 8002e30:	ee10 aa10 	vmov	sl, s0
 8002e34:	dc09      	bgt.n	8002e4a <__ieee754_pow+0x42>
 8002e36:	d103      	bne.n	8002e40 <__ieee754_pow+0x38>
 8002e38:	b93e      	cbnz	r6, 8002e4a <__ieee754_pow+0x42>
 8002e3a:	45a0      	cmp	r8, r4
 8002e3c:	dc0d      	bgt.n	8002e5a <__ieee754_pow+0x52>
 8002e3e:	e001      	b.n	8002e44 <__ieee754_pow+0x3c>
 8002e40:	4598      	cmp	r8, r3
 8002e42:	dc02      	bgt.n	8002e4a <__ieee754_pow+0x42>
 8002e44:	4598      	cmp	r8, r3
 8002e46:	d10e      	bne.n	8002e66 <__ieee754_pow+0x5e>
 8002e48:	b16a      	cbz	r2, 8002e66 <__ieee754_pow+0x5e>
 8002e4a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002e4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002e52:	ea54 030a 	orrs.w	r3, r4, sl
 8002e56:	f000 84a4 	beq.w	80037a2 <__ieee754_pow+0x99a>
 8002e5a:	486e      	ldr	r0, [pc, #440]	; (8003014 <__ieee754_pow+0x20c>)
 8002e5c:	b011      	add	sp, #68	; 0x44
 8002e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e62:	f000 bda5 	b.w	80039b0 <nan>
 8002e66:	2d00      	cmp	r5, #0
 8002e68:	da53      	bge.n	8002f12 <__ieee754_pow+0x10a>
 8002e6a:	4b6b      	ldr	r3, [pc, #428]	; (8003018 <__ieee754_pow+0x210>)
 8002e6c:	4598      	cmp	r8, r3
 8002e6e:	dc4d      	bgt.n	8002f0c <__ieee754_pow+0x104>
 8002e70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002e74:	4598      	cmp	r8, r3
 8002e76:	dd4c      	ble.n	8002f12 <__ieee754_pow+0x10a>
 8002e78:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002e7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002e80:	2b14      	cmp	r3, #20
 8002e82:	dd26      	ble.n	8002ed2 <__ieee754_pow+0xca>
 8002e84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002e88:	fa22 f103 	lsr.w	r1, r2, r3
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d13e      	bne.n	8002f12 <__ieee754_pow+0x10a>
 8002e94:	f001 0101 	and.w	r1, r1, #1
 8002e98:	f1c1 0b02 	rsb	fp, r1, #2
 8002e9c:	2a00      	cmp	r2, #0
 8002e9e:	d15b      	bne.n	8002f58 <__ieee754_pow+0x150>
 8002ea0:	4b5b      	ldr	r3, [pc, #364]	; (8003010 <__ieee754_pow+0x208>)
 8002ea2:	4598      	cmp	r8, r3
 8002ea4:	d124      	bne.n	8002ef0 <__ieee754_pow+0xe8>
 8002ea6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002eaa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002eae:	ea53 030a 	orrs.w	r3, r3, sl
 8002eb2:	f000 8476 	beq.w	80037a2 <__ieee754_pow+0x99a>
 8002eb6:	4b59      	ldr	r3, [pc, #356]	; (800301c <__ieee754_pow+0x214>)
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	dd2d      	ble.n	8002f18 <__ieee754_pow+0x110>
 8002ebc:	f1b9 0f00 	cmp.w	r9, #0
 8002ec0:	f280 8473 	bge.w	80037aa <__ieee754_pow+0x9a2>
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	ec41 0b10 	vmov	d0, r0, r1
 8002ecc:	b011      	add	sp, #68	; 0x44
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	d13e      	bne.n	8002f54 <__ieee754_pow+0x14c>
 8002ed6:	f1c3 0314 	rsb	r3, r3, #20
 8002eda:	fa48 f103 	asr.w	r1, r8, r3
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	4543      	cmp	r3, r8
 8002ee4:	f040 8469 	bne.w	80037ba <__ieee754_pow+0x9b2>
 8002ee8:	f001 0101 	and.w	r1, r1, #1
 8002eec:	f1c1 0b02 	rsb	fp, r1, #2
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <__ieee754_pow+0x218>)
 8002ef2:	4598      	cmp	r8, r3
 8002ef4:	d118      	bne.n	8002f28 <__ieee754_pow+0x120>
 8002ef6:	f1b9 0f00 	cmp.w	r9, #0
 8002efa:	f280 845a 	bge.w	80037b2 <__ieee754_pow+0x9aa>
 8002efe:	4948      	ldr	r1, [pc, #288]	; (8003020 <__ieee754_pow+0x218>)
 8002f00:	4632      	mov	r2, r6
 8002f02:	463b      	mov	r3, r7
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fd fc45 	bl	8000794 <__aeabi_ddiv>
 8002f0a:	e7dd      	b.n	8002ec8 <__ieee754_pow+0xc0>
 8002f0c:	f04f 0b02 	mov.w	fp, #2
 8002f10:	e7c4      	b.n	8002e9c <__ieee754_pow+0x94>
 8002f12:	f04f 0b00 	mov.w	fp, #0
 8002f16:	e7c1      	b.n	8002e9c <__ieee754_pow+0x94>
 8002f18:	f1b9 0f00 	cmp.w	r9, #0
 8002f1c:	dad2      	bge.n	8002ec4 <__ieee754_pow+0xbc>
 8002f1e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002f22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002f26:	e7cf      	b.n	8002ec8 <__ieee754_pow+0xc0>
 8002f28:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002f2c:	d106      	bne.n	8002f3c <__ieee754_pow+0x134>
 8002f2e:	4632      	mov	r2, r6
 8002f30:	463b      	mov	r3, r7
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f7fd fb03 	bl	8000540 <__aeabi_dmul>
 8002f3a:	e7c5      	b.n	8002ec8 <__ieee754_pow+0xc0>
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <__ieee754_pow+0x21c>)
 8002f3e:	4599      	cmp	r9, r3
 8002f40:	d10a      	bne.n	8002f58 <__ieee754_pow+0x150>
 8002f42:	2d00      	cmp	r5, #0
 8002f44:	db08      	blt.n	8002f58 <__ieee754_pow+0x150>
 8002f46:	ec47 6b10 	vmov	d0, r6, r7
 8002f4a:	b011      	add	sp, #68	; 0x44
 8002f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f50:	f000 bc68 	b.w	8003824 <__ieee754_sqrt>
 8002f54:	f04f 0b00 	mov.w	fp, #0
 8002f58:	ec47 6b10 	vmov	d0, r6, r7
 8002f5c:	f000 fd12 	bl	8003984 <fabs>
 8002f60:	ec51 0b10 	vmov	r0, r1, d0
 8002f64:	f1ba 0f00 	cmp.w	sl, #0
 8002f68:	d127      	bne.n	8002fba <__ieee754_pow+0x1b2>
 8002f6a:	b124      	cbz	r4, 8002f76 <__ieee754_pow+0x16e>
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <__ieee754_pow+0x218>)
 8002f6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d121      	bne.n	8002fba <__ieee754_pow+0x1b2>
 8002f76:	f1b9 0f00 	cmp.w	r9, #0
 8002f7a:	da05      	bge.n	8002f88 <__ieee754_pow+0x180>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	2000      	movs	r0, #0
 8002f82:	4927      	ldr	r1, [pc, #156]	; (8003020 <__ieee754_pow+0x218>)
 8002f84:	f7fd fc06 	bl	8000794 <__aeabi_ddiv>
 8002f88:	2d00      	cmp	r5, #0
 8002f8a:	da9d      	bge.n	8002ec8 <__ieee754_pow+0xc0>
 8002f8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002f90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002f94:	ea54 030b 	orrs.w	r3, r4, fp
 8002f98:	d108      	bne.n	8002fac <__ieee754_pow+0x1a4>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd f915 	bl	80001d0 <__aeabi_dsub>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	e7ac      	b.n	8002f06 <__ieee754_pow+0xfe>
 8002fac:	f1bb 0f01 	cmp.w	fp, #1
 8002fb0:	d18a      	bne.n	8002ec8 <__ieee754_pow+0xc0>
 8002fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	e786      	b.n	8002ec8 <__ieee754_pow+0xc0>
 8002fba:	0fed      	lsrs	r5, r5, #31
 8002fbc:	1e6b      	subs	r3, r5, #1
 8002fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8002fc0:	ea5b 0303 	orrs.w	r3, fp, r3
 8002fc4:	d102      	bne.n	8002fcc <__ieee754_pow+0x1c4>
 8002fc6:	4632      	mov	r2, r6
 8002fc8:	463b      	mov	r3, r7
 8002fca:	e7e8      	b.n	8002f9e <__ieee754_pow+0x196>
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <__ieee754_pow+0x220>)
 8002fce:	4598      	cmp	r8, r3
 8002fd0:	f340 80fe 	ble.w	80031d0 <__ieee754_pow+0x3c8>
 8002fd4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002fd8:	4598      	cmp	r8, r3
 8002fda:	dd0a      	ble.n	8002ff2 <__ieee754_pow+0x1ea>
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <__ieee754_pow+0x214>)
 8002fde:	429c      	cmp	r4, r3
 8002fe0:	dc0d      	bgt.n	8002ffe <__ieee754_pow+0x1f6>
 8002fe2:	f1b9 0f00 	cmp.w	r9, #0
 8002fe6:	f6bf af6d 	bge.w	8002ec4 <__ieee754_pow+0xbc>
 8002fea:	a307      	add	r3, pc, #28	; (adr r3, 8003008 <__ieee754_pow+0x200>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	e79f      	b.n	8002f32 <__ieee754_pow+0x12a>
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <__ieee754_pow+0x224>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	ddf4      	ble.n	8002fe2 <__ieee754_pow+0x1da>
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <__ieee754_pow+0x218>)
 8002ffa:	429c      	cmp	r4, r3
 8002ffc:	dd18      	ble.n	8003030 <__ieee754_pow+0x228>
 8002ffe:	f1b9 0f00 	cmp.w	r9, #0
 8003002:	dcf2      	bgt.n	8002fea <__ieee754_pow+0x1e2>
 8003004:	e75e      	b.n	8002ec4 <__ieee754_pow+0xbc>
 8003006:	bf00      	nop
 8003008:	8800759c 	.word	0x8800759c
 800300c:	7e37e43c 	.word	0x7e37e43c
 8003010:	7ff00000 	.word	0x7ff00000
 8003014:	08003c03 	.word	0x08003c03
 8003018:	433fffff 	.word	0x433fffff
 800301c:	3fefffff 	.word	0x3fefffff
 8003020:	3ff00000 	.word	0x3ff00000
 8003024:	3fe00000 	.word	0x3fe00000
 8003028:	41e00000 	.word	0x41e00000
 800302c:	3feffffe 	.word	0x3feffffe
 8003030:	2200      	movs	r2, #0
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <__ieee754_pow+0x3b8>)
 8003034:	f7fd f8cc 	bl	80001d0 <__aeabi_dsub>
 8003038:	a355      	add	r3, pc, #340	; (adr r3, 8003190 <__ieee754_pow+0x388>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	4604      	mov	r4, r0
 8003040:	460d      	mov	r5, r1
 8003042:	f7fd fa7d 	bl	8000540 <__aeabi_dmul>
 8003046:	a354      	add	r3, pc, #336	; (adr r3, 8003198 <__ieee754_pow+0x390>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	4606      	mov	r6, r0
 800304e:	460f      	mov	r7, r1
 8003050:	4620      	mov	r0, r4
 8003052:	4629      	mov	r1, r5
 8003054:	f7fd fa74 	bl	8000540 <__aeabi_dmul>
 8003058:	2200      	movs	r2, #0
 800305a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800305e:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <__ieee754_pow+0x3bc>)
 8003060:	4620      	mov	r0, r4
 8003062:	4629      	mov	r1, r5
 8003064:	f7fd fa6c 	bl	8000540 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	a14c      	add	r1, pc, #304	; (adr r1, 80031a0 <__ieee754_pow+0x398>)
 800306e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003072:	f7fd f8ad 	bl	80001d0 <__aeabi_dsub>
 8003076:	4622      	mov	r2, r4
 8003078:	462b      	mov	r3, r5
 800307a:	f7fd fa61 	bl	8000540 <__aeabi_dmul>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	2000      	movs	r0, #0
 8003084:	4950      	ldr	r1, [pc, #320]	; (80031c8 <__ieee754_pow+0x3c0>)
 8003086:	f7fd f8a3 	bl	80001d0 <__aeabi_dsub>
 800308a:	4622      	mov	r2, r4
 800308c:	462b      	mov	r3, r5
 800308e:	4680      	mov	r8, r0
 8003090:	4689      	mov	r9, r1
 8003092:	4620      	mov	r0, r4
 8003094:	4629      	mov	r1, r5
 8003096:	f7fd fa53 	bl	8000540 <__aeabi_dmul>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4640      	mov	r0, r8
 80030a0:	4649      	mov	r1, r9
 80030a2:	f7fd fa4d 	bl	8000540 <__aeabi_dmul>
 80030a6:	a340      	add	r3, pc, #256	; (adr r3, 80031a8 <__ieee754_pow+0x3a0>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd fa48 	bl	8000540 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b8:	f7fd f88a 	bl	80001d0 <__aeabi_dsub>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4604      	mov	r4, r0
 80030c2:	460d      	mov	r5, r1
 80030c4:	4630      	mov	r0, r6
 80030c6:	4639      	mov	r1, r7
 80030c8:	f7fd f884 	bl	80001d4 <__adddf3>
 80030cc:	2000      	movs	r0, #0
 80030ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030d2:	4632      	mov	r2, r6
 80030d4:	463b      	mov	r3, r7
 80030d6:	f7fd f87b 	bl	80001d0 <__aeabi_dsub>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7fd f875 	bl	80001d0 <__aeabi_dsub>
 80030e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030e8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80030ec:	4313      	orrs	r3, r2
 80030ee:	4606      	mov	r6, r0
 80030f0:	460f      	mov	r7, r1
 80030f2:	f040 81eb 	bne.w	80034cc <__ieee754_pow+0x6c4>
 80030f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80031b0 <__ieee754_pow+0x3a8>
 80030fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80030fe:	2400      	movs	r4, #0
 8003100:	4622      	mov	r2, r4
 8003102:	462b      	mov	r3, r5
 8003104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003108:	ed8d 7b02 	vstr	d7, [sp, #8]
 800310c:	f7fd f860 	bl	80001d0 <__aeabi_dsub>
 8003110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003114:	f7fd fa14 	bl	8000540 <__aeabi_dmul>
 8003118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800311c:	4680      	mov	r8, r0
 800311e:	4689      	mov	r9, r1
 8003120:	4630      	mov	r0, r6
 8003122:	4639      	mov	r1, r7
 8003124:	f7fd fa0c 	bl	8000540 <__aeabi_dmul>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4640      	mov	r0, r8
 800312e:	4649      	mov	r1, r9
 8003130:	f7fd f850 	bl	80001d4 <__adddf3>
 8003134:	4622      	mov	r2, r4
 8003136:	462b      	mov	r3, r5
 8003138:	4680      	mov	r8, r0
 800313a:	4689      	mov	r9, r1
 800313c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003140:	f7fd f9fe 	bl	8000540 <__aeabi_dmul>
 8003144:	460b      	mov	r3, r1
 8003146:	4604      	mov	r4, r0
 8003148:	460d      	mov	r5, r1
 800314a:	4602      	mov	r2, r0
 800314c:	4649      	mov	r1, r9
 800314e:	4640      	mov	r0, r8
 8003150:	e9cd 4500 	strd	r4, r5, [sp]
 8003154:	f7fd f83e 	bl	80001d4 <__adddf3>
 8003158:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <__ieee754_pow+0x3c4>)
 800315a:	4299      	cmp	r1, r3
 800315c:	4606      	mov	r6, r0
 800315e:	460f      	mov	r7, r1
 8003160:	468b      	mov	fp, r1
 8003162:	f340 82f7 	ble.w	8003754 <__ieee754_pow+0x94c>
 8003166:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800316a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800316e:	4303      	orrs	r3, r0
 8003170:	f000 81ea 	beq.w	8003548 <__ieee754_pow+0x740>
 8003174:	a310      	add	r3, pc, #64	; (adr r3, 80031b8 <__ieee754_pow+0x3b0>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800317e:	f7fd f9df 	bl	8000540 <__aeabi_dmul>
 8003182:	a30d      	add	r3, pc, #52	; (adr r3, 80031b8 <__ieee754_pow+0x3b0>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	e6d5      	b.n	8002f36 <__ieee754_pow+0x12e>
 800318a:	bf00      	nop
 800318c:	f3af 8000 	nop.w
 8003190:	60000000 	.word	0x60000000
 8003194:	3ff71547 	.word	0x3ff71547
 8003198:	f85ddf44 	.word	0xf85ddf44
 800319c:	3e54ae0b 	.word	0x3e54ae0b
 80031a0:	55555555 	.word	0x55555555
 80031a4:	3fd55555 	.word	0x3fd55555
 80031a8:	652b82fe 	.word	0x652b82fe
 80031ac:	3ff71547 	.word	0x3ff71547
 80031b0:	00000000 	.word	0x00000000
 80031b4:	bff00000 	.word	0xbff00000
 80031b8:	8800759c 	.word	0x8800759c
 80031bc:	7e37e43c 	.word	0x7e37e43c
 80031c0:	3ff00000 	.word	0x3ff00000
 80031c4:	3fd00000 	.word	0x3fd00000
 80031c8:	3fe00000 	.word	0x3fe00000
 80031cc:	408fffff 	.word	0x408fffff
 80031d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	da05      	bge.n	80031e6 <__ieee754_pow+0x3de>
 80031da:	4bd3      	ldr	r3, [pc, #844]	; (8003528 <__ieee754_pow+0x720>)
 80031dc:	f7fd f9b0 	bl	8000540 <__aeabi_dmul>
 80031e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80031e4:	460c      	mov	r4, r1
 80031e6:	1523      	asrs	r3, r4, #20
 80031e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80031ec:	4413      	add	r3, r2
 80031ee:	9309      	str	r3, [sp, #36]	; 0x24
 80031f0:	4bce      	ldr	r3, [pc, #824]	; (800352c <__ieee754_pow+0x724>)
 80031f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80031f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80031fa:	429c      	cmp	r4, r3
 80031fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003200:	dd08      	ble.n	8003214 <__ieee754_pow+0x40c>
 8003202:	4bcb      	ldr	r3, [pc, #812]	; (8003530 <__ieee754_pow+0x728>)
 8003204:	429c      	cmp	r4, r3
 8003206:	f340 815e 	ble.w	80034c6 <__ieee754_pow+0x6be>
 800320a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800320c:	3301      	adds	r3, #1
 800320e:	9309      	str	r3, [sp, #36]	; 0x24
 8003210:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003214:	f04f 0a00 	mov.w	sl, #0
 8003218:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800321c:	930c      	str	r3, [sp, #48]	; 0x30
 800321e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003220:	4bc4      	ldr	r3, [pc, #784]	; (8003534 <__ieee754_pow+0x72c>)
 8003222:	4413      	add	r3, r2
 8003224:	ed93 7b00 	vldr	d7, [r3]
 8003228:	4629      	mov	r1, r5
 800322a:	ec53 2b17 	vmov	r2, r3, d7
 800322e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003232:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003236:	f7fc ffcb 	bl	80001d0 <__aeabi_dsub>
 800323a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800323e:	4606      	mov	r6, r0
 8003240:	460f      	mov	r7, r1
 8003242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003246:	f7fc ffc5 	bl	80001d4 <__adddf3>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	2000      	movs	r0, #0
 8003250:	49b9      	ldr	r1, [pc, #740]	; (8003538 <__ieee754_pow+0x730>)
 8003252:	f7fd fa9f 	bl	8000794 <__aeabi_ddiv>
 8003256:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4630      	mov	r0, r6
 8003260:	4639      	mov	r1, r7
 8003262:	f7fd f96d 	bl	8000540 <__aeabi_dmul>
 8003266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800326a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800326e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003272:	2300      	movs	r3, #0
 8003274:	9302      	str	r3, [sp, #8]
 8003276:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800327a:	106d      	asrs	r5, r5, #1
 800327c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003280:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003284:	2200      	movs	r2, #0
 8003286:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800328a:	4640      	mov	r0, r8
 800328c:	4649      	mov	r1, r9
 800328e:	4614      	mov	r4, r2
 8003290:	461d      	mov	r5, r3
 8003292:	f7fd f955 	bl	8000540 <__aeabi_dmul>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4630      	mov	r0, r6
 800329c:	4639      	mov	r1, r7
 800329e:	f7fc ff97 	bl	80001d0 <__aeabi_dsub>
 80032a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80032a6:	4606      	mov	r6, r0
 80032a8:	460f      	mov	r7, r1
 80032aa:	4620      	mov	r0, r4
 80032ac:	4629      	mov	r1, r5
 80032ae:	f7fc ff8f 	bl	80001d0 <__aeabi_dsub>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80032ba:	f7fc ff89 	bl	80001d0 <__aeabi_dsub>
 80032be:	4642      	mov	r2, r8
 80032c0:	464b      	mov	r3, r9
 80032c2:	f7fd f93d 	bl	8000540 <__aeabi_dmul>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4630      	mov	r0, r6
 80032cc:	4639      	mov	r1, r7
 80032ce:	f7fc ff7f 	bl	80001d0 <__aeabi_dsub>
 80032d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80032d6:	f7fd f933 	bl	8000540 <__aeabi_dmul>
 80032da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd f92b 	bl	8000540 <__aeabi_dmul>
 80032ea:	a37b      	add	r3, pc, #492	; (adr r3, 80034d8 <__ieee754_pow+0x6d0>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	4604      	mov	r4, r0
 80032f2:	460d      	mov	r5, r1
 80032f4:	f7fd f924 	bl	8000540 <__aeabi_dmul>
 80032f8:	a379      	add	r3, pc, #484	; (adr r3, 80034e0 <__ieee754_pow+0x6d8>)
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f7fc ff69 	bl	80001d4 <__adddf3>
 8003302:	4622      	mov	r2, r4
 8003304:	462b      	mov	r3, r5
 8003306:	f7fd f91b 	bl	8000540 <__aeabi_dmul>
 800330a:	a377      	add	r3, pc, #476	; (adr r3, 80034e8 <__ieee754_pow+0x6e0>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fc ff60 	bl	80001d4 <__adddf3>
 8003314:	4622      	mov	r2, r4
 8003316:	462b      	mov	r3, r5
 8003318:	f7fd f912 	bl	8000540 <__aeabi_dmul>
 800331c:	a374      	add	r3, pc, #464	; (adr r3, 80034f0 <__ieee754_pow+0x6e8>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fc ff57 	bl	80001d4 <__adddf3>
 8003326:	4622      	mov	r2, r4
 8003328:	462b      	mov	r3, r5
 800332a:	f7fd f909 	bl	8000540 <__aeabi_dmul>
 800332e:	a372      	add	r3, pc, #456	; (adr r3, 80034f8 <__ieee754_pow+0x6f0>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f7fc ff4e 	bl	80001d4 <__adddf3>
 8003338:	4622      	mov	r2, r4
 800333a:	462b      	mov	r3, r5
 800333c:	f7fd f900 	bl	8000540 <__aeabi_dmul>
 8003340:	a36f      	add	r3, pc, #444	; (adr r3, 8003500 <__ieee754_pow+0x6f8>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f7fc ff45 	bl	80001d4 <__adddf3>
 800334a:	4622      	mov	r2, r4
 800334c:	4606      	mov	r6, r0
 800334e:	460f      	mov	r7, r1
 8003350:	462b      	mov	r3, r5
 8003352:	4620      	mov	r0, r4
 8003354:	4629      	mov	r1, r5
 8003356:	f7fd f8f3 	bl	8000540 <__aeabi_dmul>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4630      	mov	r0, r6
 8003360:	4639      	mov	r1, r7
 8003362:	f7fd f8ed 	bl	8000540 <__aeabi_dmul>
 8003366:	4642      	mov	r2, r8
 8003368:	4604      	mov	r4, r0
 800336a:	460d      	mov	r5, r1
 800336c:	464b      	mov	r3, r9
 800336e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003372:	f7fc ff2f 	bl	80001d4 <__adddf3>
 8003376:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800337a:	f7fd f8e1 	bl	8000540 <__aeabi_dmul>
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	f7fc ff27 	bl	80001d4 <__adddf3>
 8003386:	4642      	mov	r2, r8
 8003388:	4606      	mov	r6, r0
 800338a:	460f      	mov	r7, r1
 800338c:	464b      	mov	r3, r9
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f7fd f8d5 	bl	8000540 <__aeabi_dmul>
 8003396:	2200      	movs	r2, #0
 8003398:	4b68      	ldr	r3, [pc, #416]	; (800353c <__ieee754_pow+0x734>)
 800339a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800339e:	f7fc ff19 	bl	80001d4 <__adddf3>
 80033a2:	4632      	mov	r2, r6
 80033a4:	463b      	mov	r3, r7
 80033a6:	f7fc ff15 	bl	80001d4 <__adddf3>
 80033aa:	9802      	ldr	r0, [sp, #8]
 80033ac:	460d      	mov	r5, r1
 80033ae:	4604      	mov	r4, r0
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4640      	mov	r0, r8
 80033b6:	4649      	mov	r1, r9
 80033b8:	f7fd f8c2 	bl	8000540 <__aeabi_dmul>
 80033bc:	2200      	movs	r2, #0
 80033be:	4680      	mov	r8, r0
 80033c0:	4689      	mov	r9, r1
 80033c2:	4b5e      	ldr	r3, [pc, #376]	; (800353c <__ieee754_pow+0x734>)
 80033c4:	4620      	mov	r0, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7fc ff02 	bl	80001d0 <__aeabi_dsub>
 80033cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80033d0:	f7fc fefe 	bl	80001d0 <__aeabi_dsub>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4630      	mov	r0, r6
 80033da:	4639      	mov	r1, r7
 80033dc:	f7fc fef8 	bl	80001d0 <__aeabi_dsub>
 80033e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033e4:	f7fd f8ac 	bl	8000540 <__aeabi_dmul>
 80033e8:	4622      	mov	r2, r4
 80033ea:	4606      	mov	r6, r0
 80033ec:	460f      	mov	r7, r1
 80033ee:	462b      	mov	r3, r5
 80033f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033f4:	f7fd f8a4 	bl	8000540 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4630      	mov	r0, r6
 80033fe:	4639      	mov	r1, r7
 8003400:	f7fc fee8 	bl	80001d4 <__adddf3>
 8003404:	4606      	mov	r6, r0
 8003406:	460f      	mov	r7, r1
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4640      	mov	r0, r8
 800340e:	4649      	mov	r1, r9
 8003410:	f7fc fee0 	bl	80001d4 <__adddf3>
 8003414:	9802      	ldr	r0, [sp, #8]
 8003416:	a33c      	add	r3, pc, #240	; (adr r3, 8003508 <__ieee754_pow+0x700>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	4604      	mov	r4, r0
 800341e:	460d      	mov	r5, r1
 8003420:	f7fd f88e 	bl	8000540 <__aeabi_dmul>
 8003424:	4642      	mov	r2, r8
 8003426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800342a:	464b      	mov	r3, r9
 800342c:	4620      	mov	r0, r4
 800342e:	4629      	mov	r1, r5
 8003430:	f7fc fece 	bl	80001d0 <__aeabi_dsub>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4630      	mov	r0, r6
 800343a:	4639      	mov	r1, r7
 800343c:	f7fc fec8 	bl	80001d0 <__aeabi_dsub>
 8003440:	a333      	add	r3, pc, #204	; (adr r3, 8003510 <__ieee754_pow+0x708>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd f87b 	bl	8000540 <__aeabi_dmul>
 800344a:	a333      	add	r3, pc, #204	; (adr r3, 8003518 <__ieee754_pow+0x710>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	4606      	mov	r6, r0
 8003452:	460f      	mov	r7, r1
 8003454:	4620      	mov	r0, r4
 8003456:	4629      	mov	r1, r5
 8003458:	f7fd f872 	bl	8000540 <__aeabi_dmul>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4630      	mov	r0, r6
 8003462:	4639      	mov	r1, r7
 8003464:	f7fc feb6 	bl	80001d4 <__adddf3>
 8003468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800346a:	4b35      	ldr	r3, [pc, #212]	; (8003540 <__ieee754_pow+0x738>)
 800346c:	4413      	add	r3, r2
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fc feaf 	bl	80001d4 <__adddf3>
 8003476:	4604      	mov	r4, r0
 8003478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800347a:	460d      	mov	r5, r1
 800347c:	f7fc fff6 	bl	800046c <__aeabi_i2d>
 8003480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003482:	4b30      	ldr	r3, [pc, #192]	; (8003544 <__ieee754_pow+0x73c>)
 8003484:	4413      	add	r3, r2
 8003486:	e9d3 8900 	ldrd	r8, r9, [r3]
 800348a:	4606      	mov	r6, r0
 800348c:	460f      	mov	r7, r1
 800348e:	4622      	mov	r2, r4
 8003490:	462b      	mov	r3, r5
 8003492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003496:	f7fc fe9d 	bl	80001d4 <__adddf3>
 800349a:	4642      	mov	r2, r8
 800349c:	464b      	mov	r3, r9
 800349e:	f7fc fe99 	bl	80001d4 <__adddf3>
 80034a2:	4632      	mov	r2, r6
 80034a4:	463b      	mov	r3, r7
 80034a6:	f7fc fe95 	bl	80001d4 <__adddf3>
 80034aa:	9802      	ldr	r0, [sp, #8]
 80034ac:	4632      	mov	r2, r6
 80034ae:	463b      	mov	r3, r7
 80034b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034b4:	f7fc fe8c 	bl	80001d0 <__aeabi_dsub>
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	f7fc fe88 	bl	80001d0 <__aeabi_dsub>
 80034c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80034c4:	e607      	b.n	80030d6 <__ieee754_pow+0x2ce>
 80034c6:	f04f 0a01 	mov.w	sl, #1
 80034ca:	e6a5      	b.n	8003218 <__ieee754_pow+0x410>
 80034cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003520 <__ieee754_pow+0x718>
 80034d0:	e613      	b.n	80030fa <__ieee754_pow+0x2f2>
 80034d2:	bf00      	nop
 80034d4:	f3af 8000 	nop.w
 80034d8:	4a454eef 	.word	0x4a454eef
 80034dc:	3fca7e28 	.word	0x3fca7e28
 80034e0:	93c9db65 	.word	0x93c9db65
 80034e4:	3fcd864a 	.word	0x3fcd864a
 80034e8:	a91d4101 	.word	0xa91d4101
 80034ec:	3fd17460 	.word	0x3fd17460
 80034f0:	518f264d 	.word	0x518f264d
 80034f4:	3fd55555 	.word	0x3fd55555
 80034f8:	db6fabff 	.word	0xdb6fabff
 80034fc:	3fdb6db6 	.word	0x3fdb6db6
 8003500:	33333303 	.word	0x33333303
 8003504:	3fe33333 	.word	0x3fe33333
 8003508:	e0000000 	.word	0xe0000000
 800350c:	3feec709 	.word	0x3feec709
 8003510:	dc3a03fd 	.word	0xdc3a03fd
 8003514:	3feec709 	.word	0x3feec709
 8003518:	145b01f5 	.word	0x145b01f5
 800351c:	be3e2fe0 	.word	0xbe3e2fe0
 8003520:	00000000 	.word	0x00000000
 8003524:	3ff00000 	.word	0x3ff00000
 8003528:	43400000 	.word	0x43400000
 800352c:	0003988e 	.word	0x0003988e
 8003530:	000bb679 	.word	0x000bb679
 8003534:	08003c08 	.word	0x08003c08
 8003538:	3ff00000 	.word	0x3ff00000
 800353c:	40080000 	.word	0x40080000
 8003540:	08003c28 	.word	0x08003c28
 8003544:	08003c18 	.word	0x08003c18
 8003548:	a3b4      	add	r3, pc, #720	; (adr r3, 800381c <__ieee754_pow+0xa14>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	4640      	mov	r0, r8
 8003550:	4649      	mov	r1, r9
 8003552:	f7fc fe3f 	bl	80001d4 <__adddf3>
 8003556:	4622      	mov	r2, r4
 8003558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800355c:	462b      	mov	r3, r5
 800355e:	4630      	mov	r0, r6
 8003560:	4639      	mov	r1, r7
 8003562:	f7fc fe35 	bl	80001d0 <__aeabi_dsub>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800356e:	f7fd fa77 	bl	8000a60 <__aeabi_dcmpgt>
 8003572:	2800      	cmp	r0, #0
 8003574:	f47f adfe 	bne.w	8003174 <__ieee754_pow+0x36c>
 8003578:	4aa3      	ldr	r2, [pc, #652]	; (8003808 <__ieee754_pow+0xa00>)
 800357a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800357e:	4293      	cmp	r3, r2
 8003580:	f340 810a 	ble.w	8003798 <__ieee754_pow+0x990>
 8003584:	151b      	asrs	r3, r3, #20
 8003586:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800358a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800358e:	fa4a f303 	asr.w	r3, sl, r3
 8003592:	445b      	add	r3, fp
 8003594:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003598:	4e9c      	ldr	r6, [pc, #624]	; (800380c <__ieee754_pow+0xa04>)
 800359a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800359e:	4116      	asrs	r6, r2
 80035a0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80035a4:	2000      	movs	r0, #0
 80035a6:	ea23 0106 	bic.w	r1, r3, r6
 80035aa:	f1c2 0214 	rsb	r2, r2, #20
 80035ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80035b2:	fa4a fa02 	asr.w	sl, sl, r2
 80035b6:	f1bb 0f00 	cmp.w	fp, #0
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4620      	mov	r0, r4
 80035c0:	4629      	mov	r1, r5
 80035c2:	bfb8      	it	lt
 80035c4:	f1ca 0a00 	rsblt	sl, sl, #0
 80035c8:	f7fc fe02 	bl	80001d0 <__aeabi_dsub>
 80035cc:	e9cd 0100 	strd	r0, r1, [sp]
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035d8:	f7fc fdfc 	bl	80001d4 <__adddf3>
 80035dc:	2000      	movs	r0, #0
 80035de:	a378      	add	r3, pc, #480	; (adr r3, 80037c0 <__ieee754_pow+0x9b8>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	4604      	mov	r4, r0
 80035e6:	460d      	mov	r5, r1
 80035e8:	f7fc ffaa 	bl	8000540 <__aeabi_dmul>
 80035ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035f0:	4606      	mov	r6, r0
 80035f2:	460f      	mov	r7, r1
 80035f4:	4620      	mov	r0, r4
 80035f6:	4629      	mov	r1, r5
 80035f8:	f7fc fdea 	bl	80001d0 <__aeabi_dsub>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4640      	mov	r0, r8
 8003602:	4649      	mov	r1, r9
 8003604:	f7fc fde4 	bl	80001d0 <__aeabi_dsub>
 8003608:	a36f      	add	r3, pc, #444	; (adr r3, 80037c8 <__ieee754_pow+0x9c0>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f7fc ff97 	bl	8000540 <__aeabi_dmul>
 8003612:	a36f      	add	r3, pc, #444	; (adr r3, 80037d0 <__ieee754_pow+0x9c8>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	4680      	mov	r8, r0
 800361a:	4689      	mov	r9, r1
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc ff8e 	bl	8000540 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4640      	mov	r0, r8
 800362a:	4649      	mov	r1, r9
 800362c:	f7fc fdd2 	bl	80001d4 <__adddf3>
 8003630:	4604      	mov	r4, r0
 8003632:	460d      	mov	r5, r1
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4630      	mov	r0, r6
 800363a:	4639      	mov	r1, r7
 800363c:	f7fc fdca 	bl	80001d4 <__adddf3>
 8003640:	4632      	mov	r2, r6
 8003642:	463b      	mov	r3, r7
 8003644:	4680      	mov	r8, r0
 8003646:	4689      	mov	r9, r1
 8003648:	f7fc fdc2 	bl	80001d0 <__aeabi_dsub>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4620      	mov	r0, r4
 8003652:	4629      	mov	r1, r5
 8003654:	f7fc fdbc 	bl	80001d0 <__aeabi_dsub>
 8003658:	4642      	mov	r2, r8
 800365a:	4606      	mov	r6, r0
 800365c:	460f      	mov	r7, r1
 800365e:	464b      	mov	r3, r9
 8003660:	4640      	mov	r0, r8
 8003662:	4649      	mov	r1, r9
 8003664:	f7fc ff6c 	bl	8000540 <__aeabi_dmul>
 8003668:	a35b      	add	r3, pc, #364	; (adr r3, 80037d8 <__ieee754_pow+0x9d0>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	4604      	mov	r4, r0
 8003670:	460d      	mov	r5, r1
 8003672:	f7fc ff65 	bl	8000540 <__aeabi_dmul>
 8003676:	a35a      	add	r3, pc, #360	; (adr r3, 80037e0 <__ieee754_pow+0x9d8>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f7fc fda8 	bl	80001d0 <__aeabi_dsub>
 8003680:	4622      	mov	r2, r4
 8003682:	462b      	mov	r3, r5
 8003684:	f7fc ff5c 	bl	8000540 <__aeabi_dmul>
 8003688:	a357      	add	r3, pc, #348	; (adr r3, 80037e8 <__ieee754_pow+0x9e0>)
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f7fc fda1 	bl	80001d4 <__adddf3>
 8003692:	4622      	mov	r2, r4
 8003694:	462b      	mov	r3, r5
 8003696:	f7fc ff53 	bl	8000540 <__aeabi_dmul>
 800369a:	a355      	add	r3, pc, #340	; (adr r3, 80037f0 <__ieee754_pow+0x9e8>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fc fd96 	bl	80001d0 <__aeabi_dsub>
 80036a4:	4622      	mov	r2, r4
 80036a6:	462b      	mov	r3, r5
 80036a8:	f7fc ff4a 	bl	8000540 <__aeabi_dmul>
 80036ac:	a352      	add	r3, pc, #328	; (adr r3, 80037f8 <__ieee754_pow+0x9f0>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc fd8f 	bl	80001d4 <__adddf3>
 80036b6:	4622      	mov	r2, r4
 80036b8:	462b      	mov	r3, r5
 80036ba:	f7fc ff41 	bl	8000540 <__aeabi_dmul>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4640      	mov	r0, r8
 80036c4:	4649      	mov	r1, r9
 80036c6:	f7fc fd83 	bl	80001d0 <__aeabi_dsub>
 80036ca:	4604      	mov	r4, r0
 80036cc:	460d      	mov	r5, r1
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4640      	mov	r0, r8
 80036d4:	4649      	mov	r1, r9
 80036d6:	f7fc ff33 	bl	8000540 <__aeabi_dmul>
 80036da:	2200      	movs	r2, #0
 80036dc:	e9cd 0100 	strd	r0, r1, [sp]
 80036e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036e4:	4620      	mov	r0, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	f7fc fd72 	bl	80001d0 <__aeabi_dsub>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036f4:	f7fd f84e 	bl	8000794 <__aeabi_ddiv>
 80036f8:	4632      	mov	r2, r6
 80036fa:	4604      	mov	r4, r0
 80036fc:	460d      	mov	r5, r1
 80036fe:	463b      	mov	r3, r7
 8003700:	4640      	mov	r0, r8
 8003702:	4649      	mov	r1, r9
 8003704:	f7fc ff1c 	bl	8000540 <__aeabi_dmul>
 8003708:	4632      	mov	r2, r6
 800370a:	463b      	mov	r3, r7
 800370c:	f7fc fd62 	bl	80001d4 <__adddf3>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fc fd5a 	bl	80001d0 <__aeabi_dsub>
 800371c:	4642      	mov	r2, r8
 800371e:	464b      	mov	r3, r9
 8003720:	f7fc fd56 	bl	80001d0 <__aeabi_dsub>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	2000      	movs	r0, #0
 800372a:	4939      	ldr	r1, [pc, #228]	; (8003810 <__ieee754_pow+0xa08>)
 800372c:	f7fc fd50 	bl	80001d0 <__aeabi_dsub>
 8003730:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003734:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	da2f      	bge.n	800379e <__ieee754_pow+0x996>
 800373e:	4650      	mov	r0, sl
 8003740:	ec43 2b10 	vmov	d0, r2, r3
 8003744:	f000 f9c0 	bl	8003ac8 <scalbn>
 8003748:	ec51 0b10 	vmov	r0, r1, d0
 800374c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003750:	f7ff bbf1 	b.w	8002f36 <__ieee754_pow+0x12e>
 8003754:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <__ieee754_pow+0xa0c>)
 8003756:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800375a:	429e      	cmp	r6, r3
 800375c:	f77f af0c 	ble.w	8003578 <__ieee754_pow+0x770>
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <__ieee754_pow+0xa10>)
 8003762:	440b      	add	r3, r1
 8003764:	4303      	orrs	r3, r0
 8003766:	d00b      	beq.n	8003780 <__ieee754_pow+0x978>
 8003768:	a325      	add	r3, pc, #148	; (adr r3, 8003800 <__ieee754_pow+0x9f8>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003772:	f7fc fee5 	bl	8000540 <__aeabi_dmul>
 8003776:	a322      	add	r3, pc, #136	; (adr r3, 8003800 <__ieee754_pow+0x9f8>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f7ff bbdb 	b.w	8002f36 <__ieee754_pow+0x12e>
 8003780:	4622      	mov	r2, r4
 8003782:	462b      	mov	r3, r5
 8003784:	f7fc fd24 	bl	80001d0 <__aeabi_dsub>
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	f7fd f95e 	bl	8000a4c <__aeabi_dcmpge>
 8003790:	2800      	cmp	r0, #0
 8003792:	f43f aef1 	beq.w	8003578 <__ieee754_pow+0x770>
 8003796:	e7e7      	b.n	8003768 <__ieee754_pow+0x960>
 8003798:	f04f 0a00 	mov.w	sl, #0
 800379c:	e718      	b.n	80035d0 <__ieee754_pow+0x7c8>
 800379e:	4621      	mov	r1, r4
 80037a0:	e7d4      	b.n	800374c <__ieee754_pow+0x944>
 80037a2:	2000      	movs	r0, #0
 80037a4:	491a      	ldr	r1, [pc, #104]	; (8003810 <__ieee754_pow+0xa08>)
 80037a6:	f7ff bb8f 	b.w	8002ec8 <__ieee754_pow+0xc0>
 80037aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037ae:	f7ff bb8b 	b.w	8002ec8 <__ieee754_pow+0xc0>
 80037b2:	4630      	mov	r0, r6
 80037b4:	4639      	mov	r1, r7
 80037b6:	f7ff bb87 	b.w	8002ec8 <__ieee754_pow+0xc0>
 80037ba:	4693      	mov	fp, r2
 80037bc:	f7ff bb98 	b.w	8002ef0 <__ieee754_pow+0xe8>
 80037c0:	00000000 	.word	0x00000000
 80037c4:	3fe62e43 	.word	0x3fe62e43
 80037c8:	fefa39ef 	.word	0xfefa39ef
 80037cc:	3fe62e42 	.word	0x3fe62e42
 80037d0:	0ca86c39 	.word	0x0ca86c39
 80037d4:	be205c61 	.word	0xbe205c61
 80037d8:	72bea4d0 	.word	0x72bea4d0
 80037dc:	3e663769 	.word	0x3e663769
 80037e0:	c5d26bf1 	.word	0xc5d26bf1
 80037e4:	3ebbbd41 	.word	0x3ebbbd41
 80037e8:	af25de2c 	.word	0xaf25de2c
 80037ec:	3f11566a 	.word	0x3f11566a
 80037f0:	16bebd93 	.word	0x16bebd93
 80037f4:	3f66c16c 	.word	0x3f66c16c
 80037f8:	5555553e 	.word	0x5555553e
 80037fc:	3fc55555 	.word	0x3fc55555
 8003800:	c2f8f359 	.word	0xc2f8f359
 8003804:	01a56e1f 	.word	0x01a56e1f
 8003808:	3fe00000 	.word	0x3fe00000
 800380c:	000fffff 	.word	0x000fffff
 8003810:	3ff00000 	.word	0x3ff00000
 8003814:	4090cbff 	.word	0x4090cbff
 8003818:	3f6f3400 	.word	0x3f6f3400
 800381c:	652b82fe 	.word	0x652b82fe
 8003820:	3c971547 	.word	0x3c971547

08003824 <__ieee754_sqrt>:
 8003824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003828:	4955      	ldr	r1, [pc, #340]	; (8003980 <__ieee754_sqrt+0x15c>)
 800382a:	ec55 4b10 	vmov	r4, r5, d0
 800382e:	43a9      	bics	r1, r5
 8003830:	462b      	mov	r3, r5
 8003832:	462a      	mov	r2, r5
 8003834:	d112      	bne.n	800385c <__ieee754_sqrt+0x38>
 8003836:	ee10 2a10 	vmov	r2, s0
 800383a:	ee10 0a10 	vmov	r0, s0
 800383e:	4629      	mov	r1, r5
 8003840:	f7fc fe7e 	bl	8000540 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4620      	mov	r0, r4
 800384a:	4629      	mov	r1, r5
 800384c:	f7fc fcc2 	bl	80001d4 <__adddf3>
 8003850:	4604      	mov	r4, r0
 8003852:	460d      	mov	r5, r1
 8003854:	ec45 4b10 	vmov	d0, r4, r5
 8003858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800385c:	2d00      	cmp	r5, #0
 800385e:	ee10 0a10 	vmov	r0, s0
 8003862:	4621      	mov	r1, r4
 8003864:	dc0f      	bgt.n	8003886 <__ieee754_sqrt+0x62>
 8003866:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800386a:	4330      	orrs	r0, r6
 800386c:	d0f2      	beq.n	8003854 <__ieee754_sqrt+0x30>
 800386e:	b155      	cbz	r5, 8003886 <__ieee754_sqrt+0x62>
 8003870:	ee10 2a10 	vmov	r2, s0
 8003874:	4620      	mov	r0, r4
 8003876:	4629      	mov	r1, r5
 8003878:	f7fc fcaa 	bl	80001d0 <__aeabi_dsub>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	f7fc ff88 	bl	8000794 <__aeabi_ddiv>
 8003884:	e7e4      	b.n	8003850 <__ieee754_sqrt+0x2c>
 8003886:	151b      	asrs	r3, r3, #20
 8003888:	d073      	beq.n	8003972 <__ieee754_sqrt+0x14e>
 800388a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800388e:	07dd      	lsls	r5, r3, #31
 8003890:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003894:	bf48      	it	mi
 8003896:	0fc8      	lsrmi	r0, r1, #31
 8003898:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800389c:	bf44      	itt	mi
 800389e:	0049      	lslmi	r1, r1, #1
 80038a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80038a4:	2500      	movs	r5, #0
 80038a6:	1058      	asrs	r0, r3, #1
 80038a8:	0fcb      	lsrs	r3, r1, #31
 80038aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80038ae:	0049      	lsls	r1, r1, #1
 80038b0:	2316      	movs	r3, #22
 80038b2:	462c      	mov	r4, r5
 80038b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80038b8:	19a7      	adds	r7, r4, r6
 80038ba:	4297      	cmp	r7, r2
 80038bc:	bfde      	ittt	le
 80038be:	19bc      	addle	r4, r7, r6
 80038c0:	1bd2      	suble	r2, r2, r7
 80038c2:	19ad      	addle	r5, r5, r6
 80038c4:	0fcf      	lsrs	r7, r1, #31
 80038c6:	3b01      	subs	r3, #1
 80038c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80038cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80038d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80038d4:	d1f0      	bne.n	80038b8 <__ieee754_sqrt+0x94>
 80038d6:	f04f 0c20 	mov.w	ip, #32
 80038da:	469e      	mov	lr, r3
 80038dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80038e0:	42a2      	cmp	r2, r4
 80038e2:	eb06 070e 	add.w	r7, r6, lr
 80038e6:	dc02      	bgt.n	80038ee <__ieee754_sqrt+0xca>
 80038e8:	d112      	bne.n	8003910 <__ieee754_sqrt+0xec>
 80038ea:	428f      	cmp	r7, r1
 80038ec:	d810      	bhi.n	8003910 <__ieee754_sqrt+0xec>
 80038ee:	2f00      	cmp	r7, #0
 80038f0:	eb07 0e06 	add.w	lr, r7, r6
 80038f4:	da42      	bge.n	800397c <__ieee754_sqrt+0x158>
 80038f6:	f1be 0f00 	cmp.w	lr, #0
 80038fa:	db3f      	blt.n	800397c <__ieee754_sqrt+0x158>
 80038fc:	f104 0801 	add.w	r8, r4, #1
 8003900:	1b12      	subs	r2, r2, r4
 8003902:	428f      	cmp	r7, r1
 8003904:	bf88      	it	hi
 8003906:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800390a:	1bc9      	subs	r1, r1, r7
 800390c:	4433      	add	r3, r6
 800390e:	4644      	mov	r4, r8
 8003910:	0052      	lsls	r2, r2, #1
 8003912:	f1bc 0c01 	subs.w	ip, ip, #1
 8003916:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800391a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800391e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003922:	d1dd      	bne.n	80038e0 <__ieee754_sqrt+0xbc>
 8003924:	430a      	orrs	r2, r1
 8003926:	d006      	beq.n	8003936 <__ieee754_sqrt+0x112>
 8003928:	1c5c      	adds	r4, r3, #1
 800392a:	bf13      	iteet	ne
 800392c:	3301      	addne	r3, #1
 800392e:	3501      	addeq	r5, #1
 8003930:	4663      	moveq	r3, ip
 8003932:	f023 0301 	bicne.w	r3, r3, #1
 8003936:	106a      	asrs	r2, r5, #1
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	07e9      	lsls	r1, r5, #31
 800393c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003940:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003944:	bf48      	it	mi
 8003946:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800394a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800394e:	461c      	mov	r4, r3
 8003950:	e780      	b.n	8003854 <__ieee754_sqrt+0x30>
 8003952:	0aca      	lsrs	r2, r1, #11
 8003954:	3815      	subs	r0, #21
 8003956:	0549      	lsls	r1, r1, #21
 8003958:	2a00      	cmp	r2, #0
 800395a:	d0fa      	beq.n	8003952 <__ieee754_sqrt+0x12e>
 800395c:	02d6      	lsls	r6, r2, #11
 800395e:	d50a      	bpl.n	8003976 <__ieee754_sqrt+0x152>
 8003960:	f1c3 0420 	rsb	r4, r3, #32
 8003964:	fa21 f404 	lsr.w	r4, r1, r4
 8003968:	1e5d      	subs	r5, r3, #1
 800396a:	4099      	lsls	r1, r3
 800396c:	4322      	orrs	r2, r4
 800396e:	1b43      	subs	r3, r0, r5
 8003970:	e78b      	b.n	800388a <__ieee754_sqrt+0x66>
 8003972:	4618      	mov	r0, r3
 8003974:	e7f0      	b.n	8003958 <__ieee754_sqrt+0x134>
 8003976:	0052      	lsls	r2, r2, #1
 8003978:	3301      	adds	r3, #1
 800397a:	e7ef      	b.n	800395c <__ieee754_sqrt+0x138>
 800397c:	46a0      	mov	r8, r4
 800397e:	e7bf      	b.n	8003900 <__ieee754_sqrt+0xdc>
 8003980:	7ff00000 	.word	0x7ff00000

08003984 <fabs>:
 8003984:	ec51 0b10 	vmov	r0, r1, d0
 8003988:	ee10 2a10 	vmov	r2, s0
 800398c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003990:	ec43 2b10 	vmov	d0, r2, r3
 8003994:	4770      	bx	lr

08003996 <finite>:
 8003996:	ee10 3a90 	vmov	r3, s1
 800399a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800399e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80039a2:	0fc0      	lsrs	r0, r0, #31
 80039a4:	4770      	bx	lr

080039a6 <matherr>:
 80039a6:	2000      	movs	r0, #0
 80039a8:	4770      	bx	lr
 80039aa:	0000      	movs	r0, r0
 80039ac:	0000      	movs	r0, r0
	...

080039b0 <nan>:
 80039b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80039b8 <nan+0x8>
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	00000000 	.word	0x00000000
 80039bc:	7ff80000 	.word	0x7ff80000

080039c0 <rint>:
 80039c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039c2:	ec51 0b10 	vmov	r0, r1, d0
 80039c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80039ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80039ce:	2e13      	cmp	r6, #19
 80039d0:	460b      	mov	r3, r1
 80039d2:	ee10 4a10 	vmov	r4, s0
 80039d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80039da:	dc56      	bgt.n	8003a8a <rint+0xca>
 80039dc:	2e00      	cmp	r6, #0
 80039de:	da2b      	bge.n	8003a38 <rint+0x78>
 80039e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80039e4:	4302      	orrs	r2, r0
 80039e6:	d023      	beq.n	8003a30 <rint+0x70>
 80039e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80039ec:	4302      	orrs	r2, r0
 80039ee:	4254      	negs	r4, r2
 80039f0:	4314      	orrs	r4, r2
 80039f2:	0c4b      	lsrs	r3, r1, #17
 80039f4:	0b24      	lsrs	r4, r4, #12
 80039f6:	045b      	lsls	r3, r3, #17
 80039f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80039fc:	ea44 0103 	orr.w	r1, r4, r3
 8003a00:	460b      	mov	r3, r1
 8003a02:	492f      	ldr	r1, [pc, #188]	; (8003ac0 <rint+0x100>)
 8003a04:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8003a08:	e9d1 6700 	ldrd	r6, r7, [r1]
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4639      	mov	r1, r7
 8003a10:	4630      	mov	r0, r6
 8003a12:	f7fc fbdf 	bl	80001d4 <__adddf3>
 8003a16:	e9cd 0100 	strd	r0, r1, [sp]
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a22:	f7fc fbd5 	bl	80001d0 <__aeabi_dsub>
 8003a26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a2a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8003a2e:	4639      	mov	r1, r7
 8003a30:	ec41 0b10 	vmov	d0, r0, r1
 8003a34:	b003      	add	sp, #12
 8003a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a38:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <rint+0x104>)
 8003a3a:	4132      	asrs	r2, r6
 8003a3c:	ea01 0702 	and.w	r7, r1, r2
 8003a40:	4307      	orrs	r7, r0
 8003a42:	d0f5      	beq.n	8003a30 <rint+0x70>
 8003a44:	0852      	lsrs	r2, r2, #1
 8003a46:	4011      	ands	r1, r2
 8003a48:	430c      	orrs	r4, r1
 8003a4a:	d00b      	beq.n	8003a64 <rint+0xa4>
 8003a4c:	ea23 0202 	bic.w	r2, r3, r2
 8003a50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a54:	2e13      	cmp	r6, #19
 8003a56:	fa43 f306 	asr.w	r3, r3, r6
 8003a5a:	bf0c      	ite	eq
 8003a5c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8003a60:	2400      	movne	r4, #0
 8003a62:	4313      	orrs	r3, r2
 8003a64:	4916      	ldr	r1, [pc, #88]	; (8003ac0 <rint+0x100>)
 8003a66:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7fc fbae 	bl	80001d4 <__adddf3>
 8003a78:	e9cd 0100 	strd	r0, r1, [sp]
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	462b      	mov	r3, r5
 8003a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a84:	f7fc fba4 	bl	80001d0 <__aeabi_dsub>
 8003a88:	e7d2      	b.n	8003a30 <rint+0x70>
 8003a8a:	2e33      	cmp	r6, #51	; 0x33
 8003a8c:	dd07      	ble.n	8003a9e <rint+0xde>
 8003a8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003a92:	d1cd      	bne.n	8003a30 <rint+0x70>
 8003a94:	ee10 2a10 	vmov	r2, s0
 8003a98:	f7fc fb9c 	bl	80001d4 <__adddf3>
 8003a9c:	e7c8      	b.n	8003a30 <rint+0x70>
 8003a9e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8003aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aa6:	40f2      	lsrs	r2, r6
 8003aa8:	4210      	tst	r0, r2
 8003aaa:	d0c1      	beq.n	8003a30 <rint+0x70>
 8003aac:	0852      	lsrs	r2, r2, #1
 8003aae:	4210      	tst	r0, r2
 8003ab0:	bf1f      	itttt	ne
 8003ab2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8003ab6:	ea20 0202 	bicne.w	r2, r0, r2
 8003aba:	4134      	asrne	r4, r6
 8003abc:	4314      	orrne	r4, r2
 8003abe:	e7d1      	b.n	8003a64 <rint+0xa4>
 8003ac0:	08003c38 	.word	0x08003c38
 8003ac4:	000fffff 	.word	0x000fffff

08003ac8 <scalbn>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	ec55 4b10 	vmov	r4, r5, d0
 8003ace:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003ad2:	4606      	mov	r6, r0
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	b9aa      	cbnz	r2, 8003b04 <scalbn+0x3c>
 8003ad8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003adc:	4323      	orrs	r3, r4
 8003ade:	d03b      	beq.n	8003b58 <scalbn+0x90>
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <scalbn+0xe0>)
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	ee10 0a10 	vmov	r0, s0
 8003aea:	f7fc fd29 	bl	8000540 <__aeabi_dmul>
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <scalbn+0xe4>)
 8003af0:	429e      	cmp	r6, r3
 8003af2:	4604      	mov	r4, r0
 8003af4:	460d      	mov	r5, r1
 8003af6:	da12      	bge.n	8003b1e <scalbn+0x56>
 8003af8:	a327      	add	r3, pc, #156	; (adr r3, 8003b98 <scalbn+0xd0>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fd1f 	bl	8000540 <__aeabi_dmul>
 8003b02:	e009      	b.n	8003b18 <scalbn+0x50>
 8003b04:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	d10c      	bne.n	8003b26 <scalbn+0x5e>
 8003b0c:	ee10 2a10 	vmov	r2, s0
 8003b10:	4620      	mov	r0, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	f7fc fb5e 	bl	80001d4 <__adddf3>
 8003b18:	4604      	mov	r4, r0
 8003b1a:	460d      	mov	r5, r1
 8003b1c:	e01c      	b.n	8003b58 <scalbn+0x90>
 8003b1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003b22:	460b      	mov	r3, r1
 8003b24:	3a36      	subs	r2, #54	; 0x36
 8003b26:	4432      	add	r2, r6
 8003b28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003b2c:	428a      	cmp	r2, r1
 8003b2e:	dd0b      	ble.n	8003b48 <scalbn+0x80>
 8003b30:	ec45 4b11 	vmov	d1, r4, r5
 8003b34:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8003ba0 <scalbn+0xd8>
 8003b38:	f000 f83c 	bl	8003bb4 <copysign>
 8003b3c:	a318      	add	r3, pc, #96	; (adr r3, 8003ba0 <scalbn+0xd8>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	ec51 0b10 	vmov	r0, r1, d0
 8003b46:	e7da      	b.n	8003afe <scalbn+0x36>
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	dd08      	ble.n	8003b5e <scalbn+0x96>
 8003b4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b58:	ec45 4b10 	vmov	d0, r4, r5
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
 8003b5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003b62:	da0d      	bge.n	8003b80 <scalbn+0xb8>
 8003b64:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003b68:	429e      	cmp	r6, r3
 8003b6a:	ec45 4b11 	vmov	d1, r4, r5
 8003b6e:	dce1      	bgt.n	8003b34 <scalbn+0x6c>
 8003b70:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8003b98 <scalbn+0xd0>
 8003b74:	f000 f81e 	bl	8003bb4 <copysign>
 8003b78:	a307      	add	r3, pc, #28	; (adr r3, 8003b98 <scalbn+0xd0>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	e7e0      	b.n	8003b42 <scalbn+0x7a>
 8003b80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b84:	3236      	adds	r2, #54	; 0x36
 8003b86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	2200      	movs	r2, #0
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <scalbn+0xe8>)
 8003b96:	e7b2      	b.n	8003afe <scalbn+0x36>
 8003b98:	c2f8f359 	.word	0xc2f8f359
 8003b9c:	01a56e1f 	.word	0x01a56e1f
 8003ba0:	8800759c 	.word	0x8800759c
 8003ba4:	7e37e43c 	.word	0x7e37e43c
 8003ba8:	43500000 	.word	0x43500000
 8003bac:	ffff3cb0 	.word	0xffff3cb0
 8003bb0:	3c900000 	.word	0x3c900000

08003bb4 <copysign>:
 8003bb4:	ec51 0b10 	vmov	r0, r1, d0
 8003bb8:	ee11 0a90 	vmov	r0, s3
 8003bbc:	ee10 2a10 	vmov	r2, s0
 8003bc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003bc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003bc8:	ea41 0300 	orr.w	r3, r1, r0
 8003bcc:	ec43 2b10 	vmov	d0, r2, r3
 8003bd0:	4770      	bx	lr
	...

08003bd4 <_init>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr

08003be0 <_fini>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr
